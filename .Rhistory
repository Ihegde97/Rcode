knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(splines)
library(pdp)
library(randomForest)
set.seed(925510415)
rm(list = ls())
setwd("../Data/")
census00 <- read.csv("Data/census00.csv")
census00 <- read.csv("census00.csv")
wd
setwd("../Data")
census00 <- read.csv("census00.csv")
census00 <- read.csv("../Data/census00.csv")
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(mfx, tidyverse, hrbrthemes,mvtnorm,broom,glmnet,devtools,
crossEstimation,data.table,randomForest)
#Load the data
data<-fread("C:/Users/user/OneDrive - City University of Hong Kong/University/Cemfi/year_2/Micrometrics/Data-Code_AEJApp_MicrocreditMorocco/Output/clean_data.csv")
n<- nrow(data)
N<-nrow(data)
n1 <- sum(data[,(treatment)])
n0 <- n-n1
#Simple means estimator by OLS
ols_out<-tidy(lm(output_total~treatment,data=data))
ols_profit<-tidy(lm(profit_total~treatment,data=data))
#Simple means manually
tau_simple_out<-mean(data[treatment==1, (output_total)])-
mean(data[treatment==0,(output_total)])
tau_simple_profit<-mean(data[treatment==1, (profit_total)])-
mean(data[treatment==0,(profit_total)])
tau_simple_profit
ols_profit
data[,treat_dummy:=0]
data[treatment==1,treat_dummy:=1]
data$treat_dummy
data[,control_dummy:=0]
data[treatment==0,control_dummy:=1]
ols_profit_2<-tidy(lm(profit_total~0+treatment,data=data))
ols_profit_2
ols_profit
tau_simple_profit
ols_profit_2<-tidy(lm(profit_total~control_dummy,data=data))
ols_profit_2
data[treatment==1,profit_treat:=profit_total]
data[treatment==0,profit_control:=profit_total]
ols_profit_3<-tidy(lm(profit_treat~treatment,data=data))
ols_profit_4<-tidy(lm(profit_control~treatment,data=data))
ols_profit_3
ols_profit_4
9484-10128
knitr::opts_chunk$set(echo = TRUE)
#As long as this rmd file is in the same folder as the cps_data it should
#run fine
#setwd("~/CEMFI 2020-2021/Term 4 (Sep-Dec)/Microeconometrics/Problem Sets/PS8/")
#load all packages necessary in one go
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, data.table, modelsummary,kableExtra,synthdid,
patchwork,mvtnorm)
rm(list = ls())
set.seed(925510415)
# Load data
load("cps_data.Rdata")
# Define initial parameters
n <- dim(Y)[1]
T <- dim(Y)[2]
T_0 <- 30
# Normalize Y
Y_norm <- (Y-mean(Y))/sd(Y)
Y_svd <- svd(Y_norm)
M <- Y_svd$u[,1:4] %*% diag(Y_svd$d[1:4]) %*% t(Y_svd$v[,1:4])
E <- Y_svd$u[,5:T] %*% diag(Y_svd$d[5:T]) %*% t(Y_svd$v[,5:T])
sig2_e <- sum(E^2)/(n*T)
# Confirm M+E equals normalized Y
max(abs(Y_norm-(M+E)))
n_ones <- matrix(1, nrow=n, ncol=n)
T_ones <- matrix(1, nrow=T, ncol=T)
F <- (n_ones %*% M/n) + (M %*% T_ones/T)
L <- M-F
u <- Y_svd$u[,1:4]
pi <- glm(D~u, family="binomial")$fitted.values
DGP_1 <- function(n, T, a_0, a_1, F, L, sig2_e, pi) {
A <- rbinom(n, 1, pi)
epsilon <- matrix(rnorm(T*n, mean=0, sd=sqrt(sig2_e)), n, T)
Y <- a_0*F + a_1*L + epsilon
W <- cbind(matrix(0, nrow=n, ncol=T_0), matrix(1, nrow=n, ncol=T-T_0)) * A
data_returned <- list("Y" = Y, "W" = W)
return(data_returned)
}
B <- 400
tau_hat <- matrix(0, nrow = B, ncol = 3)
colnames(tau_hat) <- c("tau_DID", "tau_SC", "tau_SDID")
for (b in 1:B){
draw <- DGP_1(n, T, 1, 1, F, L, sig2_e, pi)
rowsort <- order(draw$W[,T])
data_Y <- draw$Y[rowsort,]
data_W <- draw$W[rowsort,]
n_0 <- sum(draw$W[,T]==0)
tau_hat[b,1] <-      did_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat[b,2] <-       sc_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat[b,3] <- synthdid_estimate(data_Y, N0 = n_0, T0 = T_0)
}
# Define plotting function
plotting_func <- function(data, x_string){
p <- ggplot(data=data, mapping=aes(x=x_string)) +
geom_density(kernel="gaussian", adjust=1.8) +
geom_vline(xintercept=0, linetype="dotted", color="blue") +
theme_minimal()
return(p)
}
# Create the plots for DGP 1
tau_hat <- data.table(tau_hat)
p1 <- plotting_func(data = tau_hat, x_string = tau_hat$tau_DID) + xlab("Diff-in-Diff") + xlim(-.15,.15)
p2 <- plotting_func(data = tau_hat, x_string = tau_hat$tau_SC) + xlab("Synthetic Controls") + xlim(-.15,.15)
p3 <- plotting_func(data = tau_hat, x_string = tau_hat$tau_SDID) + xlab("Synthetic Diff-in-Diff") + xlim(-.15,.15)
p_dgp1 <- p1 + p2 + p3 + plot_annotation(
title = "DGP 1: Distribution of Estimator Bias",
subtitle = "alpha_0 = alpha_1 = 1"
)
p_dgp1
tau_hat2 <- matrix(0, nrow = B, ncol = 3)
tau_hat3 <- matrix(0, nrow = B, ncol = 3)
colnames(tau_hat2) <- c("tau_DID", "tau_SC", "tau_SDID")
colnames(tau_hat3) <- c("tau_DID", "tau_SC", "tau_SDID")
for (b in 1:B){
# Alternative Draw #1 - alpha_0 = 1, alpha_1 = 0
draw <- DGP_1(n, T, 1, 0, F, L, sig2_e, pi)
rowsort <- order(draw$W[,T])
data_Y <- draw$Y[rowsort,]
data_W <- draw$W[rowsort,]
n_0 <- sum(draw$W[,T]==0)
tau_hat2[b,1] <-      did_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat2[b,2] <-       sc_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat2[b,3] <- synthdid_estimate(data_Y, N0 = n_0, T0 = T_0)
# Alternative Draw #2 - alpha_0 = 0, alpha_1 = 1
draw <- DGP_1(n, T, 0, 1, F, L, sig2_e, pi)
rowsort <- order(draw$W[,T])
data_Y <- draw$Y[rowsort,]
data_W <- draw$W[rowsort,]
n_0 <- sum(draw$W[,T]==0)
tau_hat3[b,1] <-      did_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat3[b,2] <-       sc_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat3[b,3] <- synthdid_estimate(data_Y, N0 = n_0, T0 = T_0)
}
summary(tau_hat)
summary(tau_hat2)
summary(tau_hat3)
# Define new DGP function (using a constant average probability instead of individual predictions)
DGP_2 <- function(n, T, a_0, a_1, F, L, sig2_e, pi) {
pibar <- mean(pi)
A <- rbinom(n, 1, pibar)
epsilon <- matrix(rnorm(T*n, mean=0, sd = sqrt(sig2_e)), n, T)
Y <- a_0*F + a_1*L + epsilon
W <- cbind(matrix(0, nrow=n, ncol=T_0), matrix(1, nrow=n, ncol=T-T_0)) * A
data_returned <- list("Y" = Y, "W" = W)
return(data_returned)
}
# Run the DGP simulation and estimation process again
tau_hat4 <- matrix(0, nrow = B, ncol = 3)
colnames(tau_hat4) <- c("tau_DID", "tau_SC", "tau_SDID")
for (b in 1:B){
draw <- DGP_2(n, T, 1, 1, F, L, sig2_e, pi)
rowsort <- order(draw$W[,T])
data_Y <- draw$Y[rowsort,]
data_W <- draw$W[rowsort,]
n_0 <- sum(draw$W[,T]==0)
tau_hat4[b,1] <-      did_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat4[b,2] <-       sc_estimate(data_Y, N0 = n_0, T0 = T_0)
tau_hat4[b,3] <- synthdid_estimate(data_Y, N0 = n_0, T0 = T_0)
}
# Create the plots for DGP 2
tau_hat4 <- data.table(tau_hat4)
p4 <- plotting_func(data=tau_hat4,x_string = tau_hat4$tau_DID) + xlab("Diff-in-Diff") + xlim(-.15,.15)
p5 <- plotting_func(data=tau_hat4,x_string = tau_hat4$tau_SC) + xlab("Synthetic Controls") + xlim(-.15,.15)
p6 <- plotting_func(data=tau_hat4,x_string = tau_hat4$tau_SDID) + xlab("Synthetic Diff-in-Diff") + xlim(-.15,.15)
p_dgp2 <- p4 + p5 + p6 + plot_annotation(
title = "DGP 2: Distribution of Estimator Bias",
subtitle= "alpha_0 = alpha_1 = 1"
)
p_dgp2
library("modelsummary")
datasummary(tau_hat)
datasummary_skim(tau_hat)
datasummary_df(tau_hat)
summary(tau_hat)
